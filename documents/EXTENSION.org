#+TITLE: Next EXTension Exposé
This Document is a place for users of Next Browser to share useful
customizations as a community. If you have something you wish to add,
please feel free to open a PR with your customization.

* Contents                                                              :TOC:
- [[#setting-the-start-page][Setting the start page]]
- [[#creating-your-own-parenscript][Creating your own Parenscript]]
- [[#running-shell-commands-within-next][Running shell commands within Next]]
- [[#reloading-the-page][Reloading the page]]
- [[#scroll-the-page-up-and-down-by-a-screen][Scroll the page up and down by a screen]]

* Setting the start page
Setting the start page can easily be achieved in the following manner:

#+NAME: start-page-set
#+BEGIN_SRC lisp
(setf *start-page-url* "about:blank")
#+END_SRC

* Creating your own Parenscript
You can call any parenscript within the browser through the convient
defparen, and defparenstatic macros. A really simple example below
shows how you could set the body with the URL of the current page.

#+NAME: hell-url
#+BEGIN_SRC lisp
(defparenstatic hello-url
    (defun set-body (text)
      (setf (ps:chain document body inner-text) text)
      ;; return nil to avoid json decode errors
      nil)
  (set-body (ps:chain document -u-r-l)))
#+END_SRC

Defparenstatic will automatically generate a defparameter named
~hello-url~ as in the case above, and a function ~(hello-url)~ that
you can invoke to act upon the currently ~*active-buffer*~.
* Running shell commands within Next
Shell mode is an extension for running simple one liner shell commands
and seeing the output. There is no history or variables. Use ~C-x s~
to enter ~*shell-mode*~ and ~c~ to enter a command and ~k~ to clear
the command output.

#+NAME: shell-mode
#+BEGIN_SRC lisp
(defvar *shell-mode-map* (make-hash-table :test 'equalp))

(defclass shell-mode (mode) ())

(defun shell-mode ()
  (make-instance 'application-mode
		 :name "shell-mode"
		 :keymap *shell-mode-map*))

(defparenstatic clear-shell-output
    (setf (ps:chain document body inner-h-t-m-l) ""))

(defparen append-output (output)
  (setf (ps:chain document body inner-h-t-m-l)
        (ps:chain document body inner-h-t-m-l
                  (concat (ps:lisp
                           (concatenate 'string output "<br />"))))))

(defun run-shell-command (input)
  (interface:web-view-execute
   (view *active-buffer*)
   (append-output
    (uiop:run-program input :force-shell t :output :string))))

(defun open-new-shell ()
  (set-visible-active-buffer
   (generate-new-buffer "*shell*" (shell-mode))))

(define-key *shell-mode-map* (kbd "c")
  (:input *minibuffer* run-shell-command))

(define-key *shell-mode-map* (kbd "k")
  #'clear-shell-output)

(define-key *global-map* (kbd "C-x s")
  #'open-new-shell)
#+END_SRC
* Reloading the page
The following function provides a way to reload the current page.

#+NAME: reload-page
#+BEGIN_SRC lisp
;; Reload page with §
(defparenstatic reload-page
  (ps:chain location (reload)))
(define-key *global-map* (kbd "§") #'reload-page)
#+END_SRC

* Scroll the page up and down by a screen
You can use the following functions to scroll the page up or down by
one screen.

#+NAME: scroll-page-up-and-down
#+BEGIN_SRC lisp
(defparenstatic scroll-page-down
    (ps:chain window (scroll-by 0 (ps:@ window inner-height))))
(defparenstatic scroll-page-up
  (ps:chain window (scroll-by 0 (- (ps:@ window inner-height)))))

;; bind the new functions
(define-key *global-map* (kbd "C-v") #'scroll-page-down)
(define-key *global-map* (kbd "M-v") #'scroll-page-up)
#+END_SRC
