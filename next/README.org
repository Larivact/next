* Contents                                                              :TOC:
- [[#developer-installation][Developer Installation]]
  - [[#macos-instructions][macOS Instructions]]
  - [[#linux-instructions][Linux Instructions]]
  - [[#running-next-from-source][Running nEXT from Source]]
  - [[#compiling-next][Compiling nEXT]]
- [[#release-timeline][Release Timeline]]
  - [[#005][0.05]]
  - [[#004][0.04]]
  - [[#003][0.03]]
  - [[#002][0.02]]
  - [[#001][0.01]]
- [[#contributing][Contributing]]

* Developer Installation
nEXT browser is built with CCL, and is designed to be cross platform
compatible. Support for graphics is provided via Cocoa for macOS and
GTK for Linux. To download a prebuilt-binary, please see the
"Releases" section of this repository.

** macOS Instructions
*** Installing CCL
- Download CCL: [[https://ccl.clozure.com/download.html]], full
  installation instructions can be found here:
  [[https://ccl.clozure.com/install.html]]. Brief installation
  instructions can be found below:

1. Copy the downloaded CCL directory to ~/usr/local/src/ccl~
2. Copy the script located at ~ccl/scripts/ccl64~ somewhere into your
   executable path
3. Optionally make an alias, or rename ~ccl64~ to ~ccl~
*** Installing Quicklisp
The official quicklisp website can provide updated links
to downloads, and instructions:

https://www.quicklisp.org

To install quicklisp:

- Download https://beta.quicklisp.org/quicklisp.lisp
- Execute ~ccl --load quicklisp.lisp~ to load quicklisp
- Evaluate in the REPL ~(quicklisp-quickstart:install)~ to install
- Evalute in the REPL ~(ql:add-to-init-file)~ to add quicklisp to your ccl init file

more detailed instructions and other resources are readily available
on the quicklisp website.
** Linux Instructions
Instructions forthcoming pending GTK release.
** Running nEXT from Source
In a new Terminal execute the following:

1. ~ccl~ to create a new CCL Repl
2. Execute ~(require :asdf)~ if asdf is not already loaded
3. Execute ~(asdf:load-asd "/path/to/next.asd")~, this will load the
   nEXT system into your Lisp image
4. Execute ~(next:start)~ to open your first nEXT Window.

** Compiling nEXT
*** macOS Instructions
From the CCL Source directory, execute

1. ~ccl --no-init --load make.lisp~
2. The compiled binary will be present in build/nEXT

* Release Timeline
Major releases are issued by incrementing the first digit. That is,
release 1.20, and 2.20 are one major release away from each other. Minor
releases are issued by incrementing by 0.01. That is, 1.01, and 1.02 are
two minor releases following major release 1.0.

** 0.05
*** TODO Window System
- Emacs like window system
*** TODO Add REPL
- Add slime support
*** TODO Create Page class with meta information about page
- Use this as data field in tree
- Use a method from this class for persistence
*** TODO History
- History will be stored in a db (possibly sqlite) with additional
  metadata that allows searching semantically, as well as searching
  by different criteria.
**** TODO History is searchable
- History has a query language that can be used to look for different
  things (e.g. date, include exclude regex, etc)
** DONE 0.04
CLOSED: [2017-11-17 Fri 15:37]
*** DONE Isolate backend QT Code
CLOSED: [2017-10-23 Mon 01:23]
- Break apart QT code into separate file
- Remove all top-level side effects
- Modularize GUI backend
**** DONE Write Cocoa backend
CLOSED: [2017-11-17 Fri 15:37]
- Use CCL Cocoa Library to use native webkit backend
*** DONE Bookmarks
CLOSED: [2017-10-10 Tue 01:06]
- Bookmarks will be stored in a db (possibly sqlite) with information
  about them, they'll be navigable via a completion buffer
** DONE 0.03
CLOSED: [2017-10-05 Thu 23:50]
*** DONE Write Manual Base
CLOSED: [2017-09-24 Sun 15:38]
- Write basic information and configuration within the manual as a
  "users" guide
*** DONE Improve in Code Documentation & Architecture
CLOSED: [2017-09-24 Sun 18:57]
- Create much clearer picture of how everything functions together,
  make cleaner architecture diagrams showing how everything links
  together
- Document all functions
*** DONE OSX Compilation
CLOSED: [2017-10-05 Thu 23:45]
- Modify make.lisp script to create a binary that grabs all of the
  dependencies and creates a executable that can be deployed on OSX
- Use `macdeployqt` to copy the core qt libraries to
  `next.app/Contents/Frameworks`
- Use `otool -L next.app/Contents/MacOS/next` to find the linked
  frameworks that are not located in `next.app/Contents/Frameworks`,
  manually copy them to `next.app/Contents/Frameworks`
- Use install_name_tool to update the now copied frameworks in 
  `next.app/Contents/Frameworks`
- For more info please see: http://doc.qt.io/qt-5/osx-deployment.html
*** DONE Kill Buffer
CLOSED: [2017-10-05 Thu 23:48]
- Add function to kill buffer, bind to C-k
** DONE 0.02
CLOSED: [2017-09-21 Thu 00:15]
*** DONE History Tree Mode
CLOSED: [2017-09-20 Wed 22:42]
- Create a mode that allows traversal of the tree created in the
  history of a document-mode buffer
*** DONE Cancel Within Minibuffer mode
CLOSED: [2017-09-17 Sun 14:53]
*** DONE Within document-mode the history will be represented as a tree
CLOSED: [2017-09-14 Thu 01:17]
- forwards and backwards navigation creating new nodes and
traversals. This will allow for all points in history to be reachable,
and a future expansion designed to recreate the functionality offered
by undo-tree: https://www.emacswiki.org/emacs/UndoTree
**** DONE Ability to navigate forward and backward in history
CLOSED: [2017-09-20 Wed 19:32]
- using the key binding M-f, and M-b for forward and backward
  respectively
- should only work if there is one child
**** DONE Forward navigation with more than one child prompts mini-buffer selection
CLOSED: [2017-09-21 Thu 00:15]
- If a user tries to navigate forward but there is more than one
  possible destination available, show the possibilities as an
  auto-completable list in the minibuffer
*** DONE CLOS
CLOSED: [2017-09-13 Wed 18:09]
- Convert struct usage to CLOS
*** DONE Scrolling
CLOSED: [2017-09-12 Tue 19:04]
- The ability to scroll up and down within a document
  - using C-n to scroll down
  - using C-p to scroll up
** DONE 0.01
CLOSED: [2017-09-09 Tue 19:05]
This version describes the minimum usability as a basic browser, with
the following features:

- Implementation of document-mode, the major-mode that all modes extend
- Ability to set key bindings for major modes
- Ability to browse and change buffers using C-x b

*** Definitions
Buffer: All documents are contained in an object type called a
buffer. As an example, a document on the web located at
http://www.url.com can be contained in a buffer with a similar name. A
buffer is composed of all elements (text, bitmaps, etc) necessary to
render a single document.

Mode-map: A keyboard hot-key to function mapping.

Minibuffer: A special buffer dedicated to interacting with nEXT
commands in progress. This buffer appears at the bottom of the screen
and is collapsed when not in use.

Major-mode: A major mode is defined as the primary mode of interacting
with a particular buffer. A mode defines a set of key bindings, hooks
for actions, and presentation details for a given view. At any given
time, there may only be one major mode for a buffer. All major modes
are composed of entirely lower case alpha with dashes used as a
separator. Every major mode has a keyboard mapping that follows this
pattern: document-mode, will have a mode map called document-mode-map.

Minor-mode: A minor mode is a secondary mode of modifying a buffer's
behavior and content. There can be an infinite amount of minor modes
applied to a given buffer. All minor modes are composed of entirely
lower case alpha with dashes used as a separator.

*** DONE Major mode: document-mode
CLOSED: [2017-08-28 Mon 00:29]
All major modes inherit from document mode. Document mode provides the
basic framework for mapping global commands and defining general
behavior.

Document-mode will be the basic major mode for opening documents on
the web. document-mode will extend document-mode, and thus will
inherit all of its key bindings. If there is a conflict of key
bindings, the lowest scope key binding will be prioritized. As a
concrete example, all bindings defined in a minor mode will override
any defined in document-mode. In the first release, document-mode will
support the following key bindings and features:

For the first release, document-mode must have:

**** DONE Ability to open a new html document with the key binding C-l
CLOSED: [2017-08-14 Mon 11:31]
Opening of new pages in the same buffer can be invoked by the key
binding C-l. This key binding will open up the Minibuffer and prompt
the user to enter the url which they would like to visit.
**** DONE Ability to open new buffers with the key-binding M-l
CLOSED: [2017-08-28 Mon 00:28]
Opening of new buffers by invoking M-l will open the Minibuffer.
Within the Minibuffer, the user will be presented with a prompt in
which they can enter in the url they would like to visit in a new
buffer.

- May possibly switch implementation to "hide" rather than "close"
  widgets, possibly using a widget pool as well for memory performance

*** DONE Ability to set Key bindings
CLOSED: [2017-08-12 Sat 16:34]
The following syntax should be used to set a key binding:

(define-key x-mode-map (kbd "C-h") 'function)

    Where x-mode-map is a keymap relating to a mode (major or minor).

    Where 'function is a function that is passed to define-key to
    trigger a function upon a key press.

(kbd "C-h") defines that the keyboard sequence Control + h is
represented. For the keyboard syntax, the following keys are
described:

- S = super key (windows/command key)
- C = control key
- M = meta key (alt key)

A chain of key bindings may be set in the following manner:

(kbd "C-x C-s") will denote the following key presses, Ctrl + x, followed
by Ctrl + s immediately thereafter.

Upon the definition of a "chained" keyboard binding, any elements
in the chain may not be used individually. For example, binding
"C-x C-s", will prohibit the binding of "C-x" by itself. This is
because there would be ambiguity in regards to which key binding
is intended to be invoked. 

*** DONE Ability to browse and change buffers
CLOSED: [2017-09-05 Tue 00:58]
The user will be able to invoke the key binding C-x b to bring up
a menu in the Minibuffer in which they will be able to select a new buffer
to bring to focus.
**** DONE Minibuffer Completion
CLOSED: [2017-09-10 Sun 01:42]
Switch buffer should demonstrate an example of minibuffer completion
candidates
*** DONE Compilation OSX
CLOSED: [2017-09-04 Mon 00:09]
- One "click" build system for deployment on OSX
- Organization of build systems into lisp files, no shell scripts

* Contributing
Please find a task within this document that has a TODO label
affixed. Upon finding a task that you'd like to work on, email the
mailing list next-browser@googlegroups.com with the TODO item and a
simple example of a proposed solution.

After you have found a TODO item that is available:

- make a fork of the repository
- add your changes
- make a pull request
